@use 'sass:map';
@use '../setup/variables';
@use '../setup/mixins';
@use '../elements/button';

$table: (
        "background": variables.$color-base-white,
        "border": variables.$color-border-light,
        "color": variables.$color-base-black,
        "font-size": 1.3rem,
        "padding": .4rem 5.6rem .4rem 2.4rem,
        "height": 5.6rem,
        "head": (
                "font-size": 1.2rem,
                "color": rgba(variables.$color-base-black, .54),
        ),
        "foot": (
                "font-size": 1.2rem,
        ),
        "compact": (
                "height": 4.4rem,
                "padding": .4rem 0 .4rem 2.4rem,
        ),
        "data-table": (
                "selection": variables.$color-primary,
                "action": variables.$color-primary,
        ),
        "responsive": (
                "head-width": 35%,
                "body-width": 65%,
                "height": 3.9rem,
                "padding": .8rem 1.8rem,
        ),
) !default;

@mixin table {
    @include mixins.box-shadow;
    $self: &;
    background: map.get($table, "background");
    border-spacing: 0;
    border-collapse: collapse;
    border-radius: variables.$border-radius;

    thead tr:first-child th:first-child, thead tr:first-child td:first-child {
        border-radius: variables.$border-radius 0 0 0;
    }

    thead tr:first-child th:last-child, thead tr:first-child td:last-child {
        border-radius: 0 variables.$border-radius 0 0;
    }

    thead tr:first-child th:first-child:last-child {
        border-radius: variables.$border-radius variables.$border-radius 0 0;
    }

    :is(tbody:last-child, tfoot:last-child) tr:last-child td {
        border-bottom: none;
    }

    :is(tbody:last-child, tfoot:last-child) tr:last-child td:first-child, :is(tbody:last-child, tfoot:last-child) tr:last-child th:first-child {
        border-radius: 0 0 0 variables.$border-radius;
    }

    :is(tbody:last-child, tfoot:last-child) tr:last-child td:last-child, :is(tbody:last-child, tfoot:last-child) tr:last-child th:last-child {
        border-radius: 0 0 variables.$border-radius 0;
    }

    :is(tbody:last-child, tfoot:last-child) tr:last-child td:first-child:last-child {
        border-radius: 0 0 variables.$border-radius variables.$border-radius;
    }

    tr {
        height: map.get($table, "height");
        transition: background .25s ease;

        &:hover {
            background: darken(map.get($table, "background"), 3%);
        }
    }

    th, td {
        padding: map.get($table, "padding");
        border-bottom: 1px solid map.get($table, "border");

        .button {
            vertical-align: middle;
        }

        &:last-of-type {
            padding-right: 2.4rem;
        }
    }

    th {
        color: map.get($table, "head", "color");
        font-size: map.get($table, "head", "font-size");
        font-weight: 500;

        a {
            color: inherit;
        }

        i {
            margin-right: .666em;
        }

        &[align="right"] {
            text-align: right;

            @media (max-width: variables.$screen-sm-max) {
                text-align: left;
            }
        }
    }

    td {
        color: map.get($table, "color");
        font-size: map.get($table, "font-size");
        font-weight: 400;
    }

    tfoot {
        background: map.get($table, "background") e;
        position: relative;
    }

    .text-field, .number-field, .select-field {
        font-size: map.get($table, "font-size");
        margin: 0;
    }

    .select-field:after {
        top: 50%;
        transform: translateY(-50%);
    }

    &.table--compact {
        tr {
            height: map.get($table, "compact", "height");
        }

        th, td {
            padding: map.get($table, "compact", "padding") x;

            .button {
                padding: .4rem .6rem;
            }

            &:last-of-type {
                padding-right: 2.4rem;
            }
        }
    }

    .checkbox {
        margin-bottom: 0;
    }

    &.table--layout-fixed {
        table-layout: fixed;
    }

    &.table--fullwidth {
        width: 100%;
    }

    &.table--scroll-horizontal {
        display: block;
        white-space: nowrap;
        overflow-x: auto;
    }

    &.table--fit {
        max-width: 100%;

        td, th {
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }
    }

    &.table--striped {
        tr th {
            background: darken(map.get($table, "background"), 3%);
        }

        tr:nth-child(even) {
            background: darken(map.get($table, "background"), 2%);

            &:hover {
                background: darken(map.get($table, "background"), 3%);
            }
        }
    }
}

table {
    @include table;
}

@mixin data-table {
    $self: &;

    &__head {
        text-align: right;

        @media (max-width: variables.$screen-sm-max) {
            .table--responsive & {
                display: block;
                position: absolute;
                left: 0;
                top: 0;
                right: 0;
            }
        }

        th {
            position: relative;

            @media (max-width: variables.$screen-sm-max) {
                .table--responsive & {
                    text-align: unset;
                }
            }
        }
    }

    &__selection {
        background: map.get($table, "background");
        color: map.get($table, "data-table", "selection");
        font-size: 1.6rem;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: space-between;
        padding: .4rem 2.4rem;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        opacity: 0;
        z-index: -1;
        transition: opacity .15s ease, z-index 0s ease .15s;

        &:before {
            background: rgba(map.get($table, "data-table", "selection"), .22);
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: -1;
        }

        #{$self}--checked & {
            opacity: 1;
            z-index: 3;
            transition: opacity .15s ease;
        }
    }

    &__action {
        color: map.get($table, "data-table", "action");
        display: inline-block;
        float: left;
        font-size: 1.6rem;
        font-weight: 600;
        text-transform: uppercase;
        vertical-align: middle;
        margin-top: 1em;

        &:hover {
            color: darken(map.get($table, "data-table", "action"), 8%);
        }
    }

    &__buttons {
        .button--icon.button--text {
            border-radius: 50%;
            font-size: 2.4rem;
            color: map.get(variables.$icon, "color");
        }
    }

    &__filter {
        @include button.button;
        @include button.button--icon;
        @include button.button--text;

        border-radius: 50%;
        font-size: 2.4rem;
        color: map.get(variables.$icon, "color");
        padding: 1rem;

        .iconify {
            margin: 0;
        }
    }

    &__footer {
        text-align: right;

        td {
            color: rgba(map.get($table, "color"), .54);
            font-size: map.get($table, "foot", "font-size");
            font-weight: 500;
            vertical-align: middle;
        }
    }

    &__results {
        float: left;
        margin-top: .8em;
    }

    &__pagination {
        display: inline-block;

        @media (max-width: variables.$screen-sm-max) {
            .pagination-list {
                display: none;
            }
        }
    }
}

.data-table {
    @include data-table;
}

@mixin table-responsive {
    @media (max-width: variables.$screen-sm-max) {
        --cols: 2;
        display: flex;
        flex-wrap: wrap;
        overflow: hidden;
        position: relative;

        thead {
            width: map.get($table, "responsive", "head-width");
        }

        tbody {
            width: map.get($table, "responsive", "body-width");
        }

        tr {
            height: auto;
        }

        th, td {
            padding: map.get($table, "responsive", "padding");
            min-height: map.get($table, "responsive", "height");
            white-space: nowrap;
            position: relative;

            .button {
                padding: 0 .6rem;
            }
        }

        th {
            text-align: left;
            border-bottom: none;
        }

        td:before {
            content: "";
            position: absolute;
            width: 100%;
            right: 100%;
            bottom: -.1rem;
            border-bottom: .1rem solid map.get($table, "border");
        }

        tr, tbody td, th, tfoot, thead, tbody {
            display: block;
            text-align: left;
        }

        &.data-table {
            padding-top: 4.2rem;
        }

        thead tr:not(.data-table__head) {
            --height: calc(#{map.get($table, "responsive", "height")} * var(--cols));
            text-shadow: 0 var(--height),
            0 calc(var(--height) * 2),
            0 calc(var(--height) * 3),
            0 calc(var(--height) * 4),
            0 calc(var(--height) * 5),
            0 calc(var(--height) * 6),
            0 calc(var(--height) * 7),
            0 calc(var(--height) * 8),
            0 calc(var(--height) * 9),
            0 calc(var(--height) * 10),
            0 calc(var(--height) * 11),
            0 calc(var(--height) * 12),
            0 calc(var(--height) * 13),
            0 calc(var(--height) * 14),
            0 calc(var(--height) * 15),
            0 calc(var(--height) * 16),
            0 calc(var(--height) * 17),
            0 calc(var(--height) * 18),
            0 calc(var(--height) * 19),
            0 calc(var(--height) * 20),
            0 calc(var(--height) * 21),
            0 calc(var(--height) * 22),
            0 calc(var(--height) * 23),
            0 calc(var(--height) * 24),
            0 calc(var(--height) * 25),
            0 calc(var(--height) * 26),
            0 calc(var(--height) * 27),
            0 calc(var(--height) * 28),
            0 calc(var(--height) * 29),
            0 calc(var(--height) * 30);
        }
    }
}

.table--responsive {
    @include table-responsive;
}